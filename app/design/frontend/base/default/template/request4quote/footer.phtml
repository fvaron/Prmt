<?php
// TODO add check to only run on checkout or cart page
/** if quote is in cart, copy quote address to customer address book if it doesn't exist */
$quoteInCartId = Mage::helper('request4quote')->cartHasQuoteItems();
if($quoteInCartId){
    $quote = Mage::getModel('request4quote/quote')->loadByIdWithoutStore($quoteInCartId);
    $quoteAddress = $quote->getShippingAddress();
    $shipMethod = $quote->getShippingAddress()->getShippingMethod();
    Mage::helper('request4quote')->checkAndCopyAddress($quoteInCartId);
}
?>
<script type="text/javascript" src="<?php echo Mage::getBaseUrl(Mage_Core_Model_Store::URL_TYPE_JS) . 'itwebexperts_request4quote/jquery.js'; ?>"></script>
<script type="text/javascript" src="<?php echo Mage::getBaseUrl(Mage_Core_Model_Store::URL_TYPE_JS) . 'itwebexperts_request4quote/noconflict.js'; ?>"></script>
<script type="text/javascript">
  var $buttonTitle = '<?php echo $this->__('Request for Quote'); ?>';
  var $miniquoteClassAfter = '<?php echo Mage::getStoreConfig(ITwebexperts_Request4quote_Helper_Data::PATH_MINICARTCLASS); ?>';
  var $quoteInCartId = '<?php echo $quoteInCartId;?>';
  var $changeShipMethod = '<?php echo Mage::helper('request4quote')->allowChangeShipMethod()?>';
  var $shipMethodQuote = '';
  var $changeShipAddress = '<?php echo Mage::helper('request4quote')->allowChangeShipAddress()?>';
  var $changeQuantity = '<?php echo Mage::helper('request4quote')->allowChangeQuantity()?>';
  <?php if(isset($quoteAddress)): ?>
  var $quoteShippingAddress = '<?php echo str_replace(array("\r","\n"),"",$quoteAddress->format('oneline')); ?>';
  <?php endif; ?>
  <?php if(isset($shipMethod)): ?>
   $shipMethodQuote = '<?php echo $shipMethod ?>';
  <?php endif;?>
    getActionsDivRfq = function (obj, canBeLink) {
        var retObj;
        retObj = obj.closest('form').find('.btn-cart, .add-to-cart');
        if(retObj.length == 0){
            retObj = obj.parent().find('.btn-cart, .add-to-cart');
        }
        if(retObj.length == 0){
            retObj = obj.parent().parent().find('.btn-cart, .add-to-cart');
        }
        if(typeof canBeLink !== 'undefined' && canBeLink == true) {
            if (retObj.length == 0) {
                retObj = obj.parent().find('a.button');
            }
            if (retObj.length == 0) {
                retObj = obj.parent().parent().find('a.button');
            }
        }

        if(retObj.length == 0){
            retObj = obj.parent().find('button.button');
        }
        if(retObj.length == 0){
            retObj = obj.parent().parent().find('button.button');
        }
        return retObj.filter(":first");

    };

    // hide add to cart buttons
    function getInternetExplorerVersion()
    {
        var rv = -1;
        if (navigator.appName == 'Microsoft Internet Explorer')
        {
            var ua = navigator.userAgent;
            var re  = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
            if (re.exec(ua) != null)
                rv = parseFloat( RegExp.$1 );
        }
        else if (navigator.appName == 'Netscape')
        {
            var ua = navigator.userAgent;
            var re  = new RegExp("Trident/.*rv:([0-9]{1,}[\.0-9]{0,})");
            if (re.exec(ua) != null)
                rv = parseFloat( RegExp.$1 );
        }
        return rv;
    }
    adjustHeightOfGridList = function () {

        $jpprR4q('.products-grid .product-info').css('padding-bottom', '0px');
        $jpprR4q('.products-grid .product-info').css('min-height', '');

        var currentTallest = 0,
            currentRowStart = 0,
            rowDivs = new Array(),
            $el,
            topPosition = 0;
        if(typeof $jpprR4q !== 'undefined') {
            $jpprR4q('ul.products-grid li.item').each(function () {
                $el = $jpprR4q(this);
                topPosition = $el.position().top;
                $el.css('padding-bottom', '0px');
                if (currentRowStart != topPosition) {
                    // we just came to a new row.  Set all the heights on the completed row
                    for (currentDiv = 0; currentDiv < rowDivs.length; currentDiv++) {
                        if (getInternetExplorerVersion() !== -1) {
                            rowDivs[currentDiv].height(currentTallest - 100);
                        }
                        rowDivs[currentDiv].find('.product-info').css('min-height', '');
                        rowDivs[currentDiv].find('.actions').css('position', 'static');
                    }
                    // set the variables for the new row
                    rowDivs.length = 0; // empty the array
                    currentRowStart = topPosition;
                    currentTallest = $el.height();
                    rowDivs.push($el);
                } else {
                    // another div on the current row.  Add it to the list and check if it's taller
                    rowDivs.push($el);
                    currentTallest = (currentTallest < $el.height()) ? ($el.height()) : (currentTallest);
                }

                // do the last row
                for (currentDiv = 0; currentDiv < rowDivs.length; currentDiv++) {
                    if (getInternetExplorerVersion() !== -1) {
                        rowDivs[currentDiv].height(currentTallest + 100);
                    }
                    rowDivs[currentDiv].find('.product-info').css('min-height', '');
                    rowDivs[currentDiv].find('.actions').css('position', 'static');
                }

            });
        }
        //alignProductGridActions();
    }

  function removeAllOtherShippingMethods(){
      // Set quote ship method to checked
      $jpprR4q('#opc-shipping_method, .shipping-form').find('.sp-methods input[value="' + $shipMethodQuote + '"]').prop('checked',true);
      // Hide radios of ship methods not allowed
      $curentli = $jpprR4q('#opc-shipping_method, .shipping-form').find('.sp-methods input[value="' + $shipMethodQuote + '"]').closest('li');
      $curentli.nextAll('li').remove();
      $curentli.prevAll('li').remove();
      $currentdd = $jpprR4q('#opc-shipping_method, .shipping-form').find('.sp-methods input[value="' + $shipMethodQuote + '"]').closest('dd');
      $currentdd.nextAll('dd').remove();
      $currentdd.prevAll('dd').remove();
      $currentdd.nextAll('dt').remove();
      $currentdd.prevAll('dt').remove();
  }
  if (typeof Checkout === 'function'){
    Checkout.prototype.namespaceOriginalGotoSection = Checkout.prototype.gotoSection;
    Checkout.prototype.gotoSection = function (section, reloadProgressBlock) {
        /**
         * Only show shipping method used with the quote
         **/
        if($changeShipMethod == 0){
            removeAllOtherShippingMethods();
        }
        this.namespaceOriginalGotoSection(section, reloadProgressBlock);
    };
}
  if($jpprR4q('.shipping-form').length > 0 && $changeShipMethod == 0){
      removeAllOtherShippingMethods();
  }

  $jpprR4q(document).ready(function () {

        /** Check if cart has quote items, lock quantity, ship method, ship address if enabled **/
        if($quoteInCartId){
            if($changeQuantity == 0){
                /** we have to select the parent of the input boxes because the input boxes are disabled
                and don't fire click events */
                $jpprR4q('td.product-cart-actions > .qty').parent().on('click',function() {
                    alert('<?php echo $this->__('Changing quantity has been disabled because your quoted price is dependant on quantity'); ?>');
                });
                $jpprR4q('tr.qty-wrapper input.qty').parent().on('click',function() {
                    alert('<?php echo $this->__('Changing quantity has been disabled because your quoted price is dependant on quantity'); ?>');
                });
                // Regular Cart
                $jpprR4q('td.product-cart-actions > .qty').prop('disabled', true);
                // Mini Cart
                $jpprR4q('tr.qty-wrapper input.qty').prop('disabled',true);
            }

            /** Disable ship address changes **/
            if($changeShipAddress == 0){
                /**
                 * If continue button pressed and billing address is the same as shipping address
                 * make sure it is the one used for the quote. If not show error and auto-select
                 * address that they should use
                 **/
                // Unset on click
                $jpprR4q('#billing-buttons-container button').prop('onclick',null);
                $jpprR4q('#billing-buttons-container button').on('click',function(event){
                    if(($jpprR4q('#billing-address-select').length > 0 && $jpprR4q('#billing-address-select option:selected').text() != $quoteShippingAddress) &&
                        ($jpprR4q('#billing\\:use_for_shipping_yes').attr('checked') == 'checked')){
                        event.preventDefault();
                        alert('<?php echo $this->__('Since you are shipping to your billing address, you must use the same address as was used on your quote or use ship to a different address. We have auto-selected your quote address for you.') ?>');
                        $jpprR4q('#billing-address-select option').filter(function(){
                            return this.text == $quoteShippingAddress;
                        }).attr('selected',true);
                        return;
                    }
                    billing.save();
                });

                /**
                 * On shipping information address selector select the one used for quote
                 * and disable changing it
                 **/
                $shippingOptions = $jpprR4q('#shipping-address-select option');
                $shippingAddressSelectToUse = $shippingOptions.filter(function() {
                    return this.text == $quoteShippingAddress;
                });
                $shippingOptions.remove();
                $jpprR4q('#shipping-address-select').append($shippingAddressSelectToUse);
                $jpprR4q('#shipping\\:same_as_billing').parent().hide();

                // $jpprR4q('#billing-address-select').prop('disabled',true);


                }
            }



        /** get miniquote and show after minicart **/
        <?php if(mage::helper('request4quote')->miniquoteEnabled()): ?>
        $miniquote = <?php echo Mage::helper('core')->jsonEncode(Mage::app()->getLayout()->getBlock('miniquote_head')->toHtml()); ?>;
        $jpprR4q($miniquote).insertAfter('.' + $miniquoteClassAfter);
      /** Re-add skip links (window open / close bind) since we have dynamically added
       *   more content that needs it
       */
//       =============================================
//       Skip Links
//       =============================================

      var skipContents = $jpprR4q('.header-miniquote .skip-content');
      var skipLinks = $jpprR4q('.header-miniquote .skip-link');

      // unbind the original skiplinks or it tries to attach 2 events to the minicart
      skipLinks.unbind('click');
      skipLinks.on('click', function (e) {
          e.preventDefault();

          var self = $jpprR4q(this);
          // Use the data-target-element attribute, if it exists. Fall back to href.
          var target = self.attr('data-target-element') ? self.attr('data-target-element') : self.attr('href');

          // Get target element
          var elem = $jpprR4q(target);

          // Check if stub is open
          var isSkipContentOpen = elem.hasClass('skip-active') ? 1 : 0;

          // Hide all stubs
          skipLinks.removeClass('skip-active');
          skipContents.removeClass('skip-active');

          // Toggle stubs
          if (isSkipContentOpen) {
              self.removeClass('skip-active');
          } else {
              self.addClass('skip-active');
              elem.addClass('skip-active');
          }
      });

      $jpprR4q('#header-quote').on('click', '.skip-link-close', function(e) {
          var parent = $jpprR4q(this).parents('.skip-content');
          var link = parent.siblings('.skip-link');

          parent.removeClass('skip-active');
          link.removeClass('skip-active');

          e.preventDefault();
      });
        <?php endif; ?>

        $$('.qty').each(function (item) {
            if ( $jpprR4q('#wishlist-view-form').length) {
                Event.observe(item, 'change', function () {
                    $(item).up('tr').select('.btn-r4q')[0].setAttribute('onclick', 'window.location.href = \'<?php echo $this->getUrl('request4quote_front/quote/add') ?>product/' + $(item).up('tr').select('input[name="r4q_quote_enabled"]')[0].getValue() + '/qty/' + $(item).getValue() + '\'; return false;');
                });
            }
        });

        $jpprR4q('input[name="r4q_quote_enabled"]').each(function () {
            if (!$jpprR4q('#wishlist-view-form').length) {
                $jpprR4q(this).nextAll('input[name="r4q_quote_enabled"]').remove();
                var qtyInp = '/from_listing/1';
                var productVal = $jpprR4q(this).val();
                var jButton = $jpprR4q('<button class="button btn btn-r4q btn-cart btn-primary add-to-cart" style="margin-top:5px;" title="' + $buttonTitle + '"><span><span>' + $buttonTitle + '</span></span></button>');
                jButton.click(function(){
                    window.location.href = '<?php echo $this->getUrl('request4quote_front/quote/add') ?>product/' + productVal + qtyInp;
                    return false;

                });
                var nextDiv = getActionsDivRfq($jpprR4q(this), true);
                if (nextDiv.length > 0) {
                    nextDiv.addClass('btn-cart-view');
                    nextDiv.after(jButton);
                }
            }
            $jpprR4q(this).remove();
        });


        $jpprR4q('input[name="r4q_hidecart"]').each(function () {
            if (! $jpprR4q('#wishlist-view-form').length) {
                if ($jpprR4q(this).val() == '1') {
                    $jpprR4q(this).parents('.item, .product-shop-container, .product-view, .product-shop, .product-shop-row, .add-to-row, .product_info_left').find('.btn-cart, .btn-cart1, .btn-cart-res, .btn-cart-view, .btn-primary').each(function () {
                        if (!$jpprR4q(this).hasClass('btn-r4q')) {
                            $jpprR4q(this).remove();
                        }
                    });
                }
            }
        });

        $$('.btn-r4q, .btn-cart').each(function (el) {
            $(el).up('div').setStyle({
                'position': 'static'
            });
        });
        adjustHeightOfGridList();

    });
    sendForm = function(url) {
        var productAddToCartFormValid = new VarienForm('product_addtocart_form')
        if (productAddToCartFormValid.validator.validate()) {
        var form = $('product_addtocart_form');
        var oldUrl = form.action;

        if (url) {
            form.action = url;
        }
        var e = null;
        try {
            form.submit();
        } catch (e) {
        }
        form.action = oldUrl;
        if (e) {
            throw e;
        }
        }

    };

    (function(open) {
        XMLHttpRequest.prototype.open = function(method, url, async, user, pass) {
            this.addEventListener("readystatechange", function() {
                if(this.readyState == 4){

                    if (typeof this.responseURL != 'undefined' && this.responseURL != '') {
                        setTimeout( function(){
                            $jpprR4q('input[name="r4q_quote_enabled"]').each(function () {
                                if (! $jpprR4q('#wishlist-view-form').length) {
                                    $jpprR4q(this).nextAll('input[name="r4q_quote_enabled"]').remove();
                                    var qtyInp = '/from_listing/1';
                                    var productVal = $jpprR4q(this).val();
                                    var jButton = $jpprR4q('<button class="button btn btn-r4q btn-cart btn-primary add-to-cart" style="margin-top:5px;" title="' + $buttonTitle + '"><span><span>' + $buttonTitle + '</span></span></button>');
                                    jButton.click(function(){
                                        window.location.href = '<?php echo $this->getUrl('request4quote_front/quote/add') ?>product/' + productVal + qtyInp;
                                        return false;
                                    });
                                    var nextDiv = getActionsDivRfq($jpprR4q(this), true);
                                    if (nextDiv.length > 0) {
                                        nextDiv.addClass('btn-cart-view');
                                        nextDiv.after(jButton);
                                    }
                                }
                            });

                            $jpprR4q('input[name="r4q_hidecart"]').each(function () {
                                if (! $jpprR4q('#wishlist-view-form').length) {
                                    if ($jpprR4q(this).val() == '1') {
                                        $jpprR4q(this).parents('.item, .product-shop-container, .product-view, .product-shop, .product-shop-row, .add-to-row, .product_info_left').find('.btn-cart, .btn-cart1, .btn-cart-res, .btn-cart-view, .btn-primary').each(function () {
                                            if (!$jpprR4q(this).hasClass('btn-r4q')) {
                                                $jpprR4q(this).remove();
                                            }
                                        });
                                    }
                                }
                            });

                        }, 2000 );
                    }

                }
            }, false);

            open.call(this, method, url, async, user, pass);
        };

    })(XMLHttpRequest.prototype.open);

</script>
<?php if(Mage::registry('current_product') && Mage::registry('current_product')->getR4qIsHiddenPrice()): ?>
    <style type="text/css">
        .price-notice {
            display: none;
        }
        .price-box{
            display: none;
        }
    </style>
<?php endif;?>
<style type="text/css">
    .hideprice .price{
        display:none;
    }
    <?php $magentoVersion = Mage::getVersion(); ?>
    <?php if(Mage::helper('request4quote')->miniquoteEnabled() && version_compare($magentoVersion, '1.9.0.1', '<=')): ?>
    .skip-account{
        right:225px;
    }
    <?php if(Mage::getSingleton('request4quote/cart')->getSummaryQty() > 0): ?>
    .header-minicart .skip-cart{
        right:130px;
    }
    <?php else: ?>
    .header-minicart .skip-cart{
        right:115px;
    }
    <?php endif; ?>
    .header-minicart.header-miniquote .skip-cart{
        right:0px;
    }
    <?php endif; ?>
    <?php if(Mage::helper('request4quote')->miniquoteEnabled()): ?>
        @media only screen and (max-width: 770px) {
            .header-minicart.header-miniquote {
                display: block;
            }
        }
    <?php endif; ?>
</style>